{"ast":null,"code":"var _jsxFileName = \"D:\\\\udemy reactjs\\\\project6\\\\src\\\\App.js\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from \"./components/AddMovie\";\n\nfunction App() {\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(); // function fetchMoviesHandler() {\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       const transformedMovie = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovies(transformedMovie);\n  //     });\n  // }\n  // const fetchMoviesHandler = useCallback(async () => {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try {\n  //     const response = await fetch(\n  //       \"https://swapi.dev/api/films\"\n  //     );\n  //     if (!response.ok) {\n  //       throw new Error(\"Something went wrong!\");\n  //     }\n  //     const data = await response.json();\n  //     const transformedMovie = data.results.map((movieData) => {\n  //             return {\n  //               id: movieData.episode_id,\n  //               title: movieData.title,\n  //               openingText: movieData.opening_crawl,\n  //               releaseDate: movieData.release_date,\n  //             };\n  //           });\n  //     setMovies(transformedMovie);\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }, []);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://listmovie-c0896-default-rtdb.firebaseio.com/movies.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      console.log(data);\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]); // function addMovieHandler(movie) {\n  //   console.log(movie);\n  // }\n\n  async function addMovieHandler(movie) {\n    const response = await fetch(\"https://listmovie-c0896-default-rtdb.firebaseio.com/movies.json\", {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    }, \"Loading....\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/udemy reactjs/project6/src/App.js"],"names":["React","useCallback","useState","useEffect","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","console","log","loadedMovies","key","push","id","title","openingText","releaseDate","message","addMovieHandler","movie","method","body","JSON","stringify","headers","content","length"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from \"./components/AddMovie\";\n\nfunction App() {\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  // function fetchMoviesHandler() {\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       const transformedMovie = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovies(transformedMovie);\n  //     });\n  // }\n\n  // const fetchMoviesHandler = useCallback(async () => {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try {\n  //     const response = await fetch(\n  //       \"https://swapi.dev/api/films\"\n  //     );\n  //     if (!response.ok) {\n  //       throw new Error(\"Something went wrong!\");\n  //     }\n\n  //     const data = await response.json();\n\n  //     const transformedMovie = data.results.map((movieData) => {\n  //             return {\n  //               id: movieData.episode_id,\n  //               title: movieData.title,\n  //               openingText: movieData.opening_crawl,\n  //               releaseDate: movieData.release_date,\n  //             };\n  //           });\n\n  //     setMovies(transformedMovie);\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }, []);\n\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        \"https://listmovie-c0896-default-rtdb.firebaseio.com/movies.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      console.log(data); \n\n      const loadedMovies = [];\n\n      for(const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate,\n\n        })\n      }\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  // function addMovieHandler(movie) {\n  //   console.log(movie);\n  // }\n\n\n  async function addMovieHandler(movie) {\n    const response = await fetch(\n      \"https://listmovie-c0896-default-rtdb.firebaseio.com/movies.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(movie),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading....</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n        {/* <button>Fetch Movies</button> */}\n      </section>\n      <section>\n        {/* {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length === 0 && !error && <p>Found no movies.</p>}\n        {!isLoading && error && <p>{error}</p>}\n        {isLoading && <p>Loading....</p>} */}\n        {content}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}